/*
*
* GENERATED IN ParamSearch.pl on 37 17 15 30 0 113 3 29 0
*
* SMI parameter file
*
* Created by Bedeho Mender on 21/11/11.
* Copyright 2011 OFTNAI. All rights reserved.
*
* Note:
* This parameter file follows the libconfig hierarchical
* configuration file format, see:
* http://www.hyperrealm.com/libconfig/libconfig_manual.html#Introducion
* The values of some parameters may cause
* other parameters to not be used, but ALL must
* always be present for parsing.
* New content adhering to the libconfig standard
* is not harmful.
*/

/*
* This fraction of timeConstant is the step size of the forward euler solver
*/
stepSizeFraction = 0.1;

/*
* Time constant for trace term
*/
traceTimeConstant = 0.400;

/*
* Whether or not to reset activity across objects in training
*/
resetActivity = false;
	
/* Only continous neurons, may lead to no output both in training and testing!*/
outputAtTimeStepMultiple = 10; 

training: {
	/*
	* What type of learning rule to apply.
	* 0 = trace, 1 = hebbian, 2 = trace presynaptic covariance
	*/
	rule = 0;
	
	/*
	* Threshold use in covariance rule
	*/
	covarianceThreshold = 0.40;
	
	/*
	* Whether or not to reset trace term across objects in training
	*/
	resetTrace = false;
	
	/*
	* Saving intermediate network states
	* as independent network files
	*/
	saveNetwork = true;
	saveNetworkAtEpochMultiple = 110;
	
	/* 
	* Only used in continouys models:
	* An epoch is one run through the file list.
	*/
	nrOfEpochs = 30; 
};

/*
* Only used in build command:
* No feedback = 0 
* symmetric feedback = 1 
* probabilistic feedback = 2
*/
feedback = 0;

/*
* Only used in build command:
* The initial weight set on synapses
* 0 = zero 
* 1 = same [0,1] uniform random weight used feedbackorward&backward
* 2 = two independent [0,1] uniform random weights used forward&backward
*/
initialWeight = 1;

/*
* What type of weight normalization will be applied after learning.
* 0 = NONE
* 1 = CLASSIC
*/
weightNormalization = 1;

/*
* Euclidean length of weight vector of each synapse,
* classic = 1.0
*/
weightVectorLength = 1.0;

/*
* What type of sparsification routine to apply.
* 0 = NONE 
* 1 = HEAP
*/
sparsenessRoutine = 1;

/*
* What type of lateral interaction to use.
* 0 = NONE
* 1 = COMP
* 2 = SOM
*/
lateralInteraction = 0;

/*
* Only used in build command:
* Random seed used to setup initial weight strength
* and setup connectivity based on radii parameter.
*/
seed = 55;

area7a: {
	/*
	* The distance between consecutive neuron preferences in visual space
	*/
	visualPreferenceDistance = 1.0;
	
	/*
	* The distance between consecutive neuron preferences in eye position space
	*/	
	eyePositionPrefrerenceDistance = 1.0;
	
	/*
	* Spread of gaussian component
	*/
	gaussianSigma = 6.00;
	
	/*
	* Horizontal visual field size
	*/	
	horVisualFieldSize = 200.00;

	/*
	* Horizontal eye position field size
	*/		
	horEyePositionFieldSize = 60.00;
	
	/*
	* Slope of eye position sigmoid component
	*/
	sigmoidSlope = 0.0625;
		
	/*
	* Percent of input layer neurons that will be sigmoid in eye modulation component of their response
	*/
	sigmoidModulationPercentage = 0.0
};

extrastriate: (

{
	dimension         				= 30;
	depth             				= 1;
	connectivity        				= 1;
	fanInRadius       				= 6;
	fanInCountPercentage     		= 0.1;
	learningrate      				= 0.05000;
	eta               				= 0.8;
	timeConstant						= 0.100;
	sparsenessLevel   				= 0.70;
	sigmoidSlope      				= 00000004.50;
	sigmoidThreshold    				= 0.00;
	globalInhibitoryConstant			= 0.0500;
	externalStimulation				= 0.0;
	inhibitoryRadius  				= 6.0;
	inhibitoryContrast				= 1.4;
	somExcitatoryRadius				= 0.6;
	somExcitatoryContrast			= 120.12;
	somInhibitoryRadius				= 6.0;
	somInhibitoryContrast			= 1.4;
	filterWidth   					= 7;
	epochs							= 10;
	saveHistory						= 0;
	recordedSingleCells				= ();
} );